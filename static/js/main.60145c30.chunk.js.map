{"version":3,"sources":["SelectCountryRegion.jsx","App.js","serviceWorker.js","index.js"],"names":["SelectsWrapper","styled","div","_templateObject","DropdownStyled","css","_templateObject2","SelectCountry","CountryDropdown","_templateObject3","SelectState","StateDropdown","_templateObject4","SelectCountryRegion","_ref","onCountryChange","onStateChange","country","state","react_default","a","createElement","onChange","value","AppWrapper","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setCountry","_useState3","_useState4","setState","selected","useEffect","fetch","params","regionId","zws-id","then","res","console","log","val","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+tBAIA,IAAMA,EAAiBC,IAAOC,IAAVC,KAOdC,EAAiBC,YAAHC,KAUdC,EAAgBN,YAAOO,IAAPP,CAAHQ,IAA6BL,GAC1CM,EAAcT,YAAOU,IAAPV,CAAHW,IAA2BR,GAG7BS,EAAA,SAAAC,GAAwD,IAArDC,EAAqDD,EAArDC,gBAAiBC,EAAoCF,EAApCE,cAAeC,EAAqBH,EAArBG,QAASC,EAAYJ,EAAZI,MACzD,OACEC,EAAAC,EAAAC,cAACrB,EAAD,KACEmB,EAAAC,EAAAC,cAACd,EAAD,CAAee,SAAUP,EAAiBQ,MAAON,IAChDA,GAAWE,EAAAC,EAAAC,cAACX,EAAD,CAAaY,SAAUN,EAAeO,MAAOL,EAAOD,QAASA,8MCzB/E,IAAMO,EAAavB,IAAOC,IAAVuB,KCQIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOb,EAAAC,EAAAC,cFQD,WAAM,IAAAY,EACWC,qBADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZhB,EADYkB,EAAA,GACHG,EADGH,EAAA,GAAAI,EAEOL,qBAFPM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEZrB,EAFYsB,EAAA,GAELC,EAFKD,EAAA,GAGbE,EAAWzB,GAAWC,EAqB5B,OANAyB,oBAAU,WACJ1B,GAAWC,GAZf0B,MAAM,0DAA2D,CAC/DC,OAAQ,CACNC,SAAY,KACZC,SAJW,0BAKV7B,WAEF8B,KAAK,SAAAC,GACNC,QAAQC,IAAIF,OAWd9B,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAAA,6BACEqB,GAAYvB,EAAAC,EAAAC,cAAA,kDACdF,EAAAC,EAAAC,cAACR,EAAD,CACEI,QAASA,EACTC,MAAOA,EACPH,gBAAiB,SAACqC,GAAD,OAASd,EAAWc,IACrCpC,cAAe,SAACoC,GAAD,OAASX,EAASW,MAEjCV,EAEEvB,EAAAC,EAAAC,cAAA,qCAA6BJ,EAA7B,QAA2CC,GAD3CC,EAAAC,EAAAC,cAAA,kFE3CM,MAASgC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMT,KAAK,SAAAU,GACjCA,EAAaC","file":"static/js/main.60145c30.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { CountryDropdown, RegionDropdown as StateDropdown, } from 'react-country-region-selector';\n\nconst SelectsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  transition: all 0.5s ease;\n`;\n\nconst DropdownStyled = css`\n  width: 500px;\n  height: 50px;\n  background-color: white;\n  font-size: 20px;\n  outline: none;\n  cursor: pointer;\n  margin-bottom: 15px;\n`;\n\nconst SelectCountry = styled(CountryDropdown)`${DropdownStyled}`;\nconst SelectState = styled(StateDropdown)`${DropdownStyled}`;\n\n\nexport default ({ onCountryChange, onStateChange, country, state }) => {\n  return (\n    <SelectsWrapper>\n      <SelectCountry onChange={onCountryChange} value={country} />\n      {country && <SelectState onChange={onStateChange} value={state} country={country} />}\n    </SelectsWrapper>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport SelectCountryRegion from './SelectCountryRegion.jsx';\n\nconst AppWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-sizing: border-box;\n`;\n\nexport default () => {\n  const [country, setCountry] = useState();\n  const [state, setState] = useState();\n  const selected = country && state;\n\n  const getZillowResults = () => {\n    const ZWS_ID = 'X1-ZWz182nhjn9897_64j9s';\n    fetch('https://www.zillow.com/webservice/GetRegionChildren.htm', {\n      params: {\n        'regionId': 'US',\n        'zws-id': ZWS_ID,\n         state\n      }\n    }).then(res => {\n      console.log(res);\n    })\n  }\n\n  useEffect(() => {\n    if (country && state) {\n      getZillowResults();\n    }\n  });\n\n  return (\n    <AppWrapper>\n      <h1>Housing Finder</h1>\n      {!selected && <h2>Please select your country and state</h2>}\n      <SelectCountryRegion\n        country={country}\n        state={state}\n        onCountryChange={(val) => setCountry(val)}\n        onStateChange={(val) => setState(val)}\n      />\n      {!selected\n        ? <h2>Your results will appear here once you select country and state..!</h2>\n        : <h2>Displaying results from {country} and {state}</h2>\n      }\n\n    </AppWrapper>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}