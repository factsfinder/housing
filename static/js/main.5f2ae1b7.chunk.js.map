{"version":3,"sources":["SelectAddress.jsx","App.js","serviceWorker.js","index.js"],"names":["zillow","Zillow","https","SearchWrapper","styled","div","_templateObject","SearchInputStyles","css","_templateObject2","SearchInput","input","_templateObject3","SuggestionsWrapper","_templateObject4","SelectAddress","_ref","className","_useState","useState","_useState2","Object","slicedToArray","address","setAddress","react_default","a","createElement","dist_default","onChange","value","onSelect","val","geocodeByAddress","then","res","city","address_components","state","params","citystatezip","concat","get","console","log","_ref2","getInputProps","suggestions","getSuggestionItemProps","loading","Fragment","placeholder","map","suggestion","active","style","backgroundColor","cursor","description","AppWrapper","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"s2BAOA,IAAMA,EAAS,WAAIC,GAAO,0BAA2B,CAACC,OAAO,IAEvDC,EAAgBC,IAAOC,IAAVC,KAObC,EAAoBC,YAAHC,KASjBC,EAAcN,IAAOO,MAAVC,IAAkBL,GAG7BM,EAAqBT,IAAOC,IAAVS,KAITC,EAAA,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,UAAgBC,EACFC,qBADEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GAChBI,EADgBJ,EAAA,GAchC,OACEK,EAAAC,EAAAC,cAACxB,EAAD,KACEsB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAoBG,SAAUL,EAAYM,MAAOP,EAASN,UAAWA,EAAWc,SAd/D,SAACC,GACpBR,EAAWQ,GACXC,2BAAiBD,GAAKE,KAAK,SAAAC,GACzB,IAAMC,EAAOD,EAAI,GAAGE,mBAAmB,GACjCC,EAAQH,EAAI,GAAGE,mBAAmB,GAClCE,EAAS,CACbhB,QAASS,EACTQ,aAAY,GAAAC,OAAKL,EAAL,MAAAK,OAAcH,IAE5B,OAAOtC,EAAO0C,IAAI,mBAAoBH,GAAQL,KAAK,SAAAC,GAAG,OAAIQ,QAAQC,IAAIT,SAMnE,SAAAU,GAAqE,IAAlEC,EAAkED,EAAlEC,cAAeC,EAAmDF,EAAnDE,YAAaC,EAAsCH,EAAtCG,uBAAwBC,EAAcJ,EAAdI,QACtD,OACExB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwB,SAAA,KACEzB,EAAAC,EAAAC,cAACjB,EACKoC,EAAc,CAChBK,YAAa,wBAGjB1B,EAAAC,EAAAC,cAACd,EAAD,CAAoBU,QAASA,GAC1B0B,GAAWxB,EAAAC,EAAAC,cAAA,yBACXoB,EAAYK,IAAI,SAAAC,GACf,IAAMpC,EAAYoC,EAAWC,OACzB,0BACA,kBAEEC,EAAQF,EAAWC,OACrB,CAAEE,gBAAiB,UAAWC,OAAQ,WACtC,CAAED,gBAAiB,UAAWC,OAAQ,WAC1C,OACEhC,EAAAC,EAAAC,cAAA,MACMqB,EAAuBK,EAAY,CACrCpC,YACAsC,UAGF9B,EAAAC,EAAAC,cAAA,YAAO0B,EAAWK,8NCtExC,IAAMC,EAAavD,IAAOC,IAAVuD,KCQIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO1C,EAAAC,EAAAC,cFQD,WACb,OACEF,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACZ,EAAD,QEZU,MAASqD,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.5f2ae1b7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport PlacesAutoComplete, {\n  geocodeByAddress,\n} from 'react-places-autocomplete';\nimport Zillow from 'node-zillow';\n\nconst zillow = new Zillow('X1-ZWz182nhjn9897_64j9s', {https: true});\n\nconst SearchWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  transition: all 0.5s ease;\n`;\n\nconst SearchInputStyles = css`\n  width: 500px;\n  height: 50px;\n  background-color: white;\n  font-size: 20px;\n  outline: none;\n  margin-bottom: 15px;\n`;\n\nconst SearchInput = styled.input`${SearchInputStyles}`;\n\n\nconst SuggestionsWrapper = styled.div`\n  background-color: white;\n`;\n\nexport default ({ className }) => {\n  const [address, setAddress] = useState();\n  const handleSelect = (val) => {\n    setAddress(val);\n    geocodeByAddress(val).then(res => {\n      const city = res[0].address_components[3];\n      const state = res[0].address_components[5];\n      const params = {\n        address: val,\n        citystatezip: `${city}, ${state}`\n      }\n      return zillow.get('GetSearchResults', params).then(res => console.log(res));\n    });\n  }\n  return (\n    <SearchWrapper>\n      <PlacesAutoComplete onChange={setAddress} value={address} className={className} onSelect={handleSelect}>\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\n          return (\n            <>\n              <SearchInput\n                {...getInputProps({\n                  placeholder: 'Search listings...',\n                })}\n              />\n              <SuggestionsWrapper address={address}>\n                {loading && <div>Loading...</div>}\n                {suggestions.map(suggestion => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  // inline style for demonstration purpose\n                  const style = suggestion.active\n                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                        style,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </SuggestionsWrapper>\n            </>\n\n          );\n        }}\n      </PlacesAutoComplete>\n    </SearchWrapper>\n  );\n}","import React from 'react';\nimport styled from 'styled-components';\nimport SelectAddress from './SelectAddress.jsx';\n\nconst AppWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-sizing: border-box;\n`;\n\nexport default () => {\n  return (\n    <AppWrapper>\n      <h1>Housing Finder</h1>\n      <SelectAddress />\n\n    </AppWrapper>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}